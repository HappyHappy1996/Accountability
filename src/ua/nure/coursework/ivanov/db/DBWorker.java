package ua.nure.coursework.ivanov.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

// 					INSERT INTO Persons (FirstName,LastName,Address,City) VALUES ('Lars','Monsen',21323,432112)

import ua.nure.coursework.ivanov.data.Person;

public class DBWorker {

	private static DBWorker instance;

	private static final String URL = "jdbc:derby:tripdb;create=true";
	private static final String USER = "root";
	private static final String PASSWORD = "rootdb";
	private static final String TABLE_NAME = "trips";

	private Connection connection = null;
	private Statement statement = null;

	private DBWorker() throws SQLException, ReflectiveOperationException {
		try {
			Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
			connection = DriverManager.getConnection(URL, USER, PASSWORD);
		} catch (SQLException e) {
			shutdown();
			System.err.println("Couldn't get connection");
		} catch (ReflectiveOperationException e) {
			System.err.println("Couldn't register driver");
		}
	}

	public Connection getConnection() {
		return connection;
	}

	public static synchronized DBWorker getInstance() throws SQLException,
			ReflectiveOperationException {
		if (instance == null) {
			instance = new DBWorker();
		}
		return instance;
	}

	private void createTable() throws SQLException {
		statement = connection.createStatement();
        statement.execute("create table " + TABLE_NAME + "(id int not null generated by default as identity, " +
        		"name varchar(40), appointment varchar(20), destination varchar(20), date timestamp, " +
        		"expectedDuration int, expectedTicketPrice double, expectedDailyHabitation double, " +
        		"actualDuration int, actualTicketPrice double, actualDailyHabitation double, balance double)");
        System.out.println("db is created, all is ok");
        statement.close();
    }
	
	private void dropTable() throws SQLException {
		statement = connection.createStatement();
        statement.execute("drop table " + TABLE_NAME);
        System.out.println("db is dropped, all is ok");
        statement.close();
    }
        
//    public double selectAllTrips() throws SQLException {
//		try {
//			statement = connection.createStatement();
//			ResultSet resultSet = statement.executeQuery("select rate from " + TABLE_NAME + " where name = '" + currencyName + "'");
//			double rate = 0;
//			 if (resultSet.next()) {
//				rate = resultSet.getDouble("rate");
//			 }
//			
//			resultSet.close();
//			statement.close();
//			return rate;
//		} catch (SQLException e) {
//			throw e;
//		}
//	}

	public void updateTrip(String name, String appointment, String destination, String date, int id) throws SQLException {
    	statement = connection.createStatement();
    	statement.execute("update " + TABLE_NAME + " set name='" + name + "', appointment='" + appointment +
    			"', destination='" + destination + "', date={ts '" + date + " 00:00:00'}" + " where id = " + id);
    	statement.close();
    }
    
    public void updateTrip(String name, String appointment, String destination, String date,
    		int expectedDuration, double expectedTicketPrice, double expectedDailyHabitation, int id) throws SQLException {
    	statement = connection.createStatement();
    	statement.execute("update " + TABLE_NAME + " set name='" + name + "', appointment='" + appointment +
    			"', destination='" + destination + "' , date={ts '" + date + " 00:00:00'}, expectedDuration=" +
    			expectedDuration + ", expectedTicketPrice=" + expectedTicketPrice +
    			", expectedDailyHabitation=" + expectedDailyHabitation + " where id = " + id);
    	statement.close();
    }
    
    public void updateTrip(String name, String appointment, String destination, String date,
    		int expectedDuration, double expectedTicketPrice, double expectedDailyHabitation,
    		int actualDuration, double actualTicketPrice, double actualDailyHabitation, int id) throws SQLException {
    	statement = connection.createStatement();
    	statement.execute("update " + TABLE_NAME + " set name='" + name + "', appointment='" + appointment +
    			"', destination='" + destination + "' , date={ts '" + date + " 00:00:00'}, expectedDuration=" +
    			expectedDuration + ", expectedTicketPrice=" + expectedTicketPrice + ", expectedDailyHabitation=" + expectedDailyHabitation + 
    			", actualDuration=" + actualDuration + ", actualTicketPrice=" + actualTicketPrice + 
    			", actualDailyHabitation=" + actualDailyHabitation + " where id = " + id);
    	statement.close();
    }
    
    public void insertTrip(String name, String appointment, String destination, String date) throws SQLException {
    	statement = connection.createStatement();
    	statement.execute("insert into " + TABLE_NAME + " (name, appointment, destination, date) values ('" +
    			name + "', '" + appointment + "', '" + destination + "', {ts '" + date + " 00:00:00'})");
    	statement.close();
    }
    
    public void insertTrip(String name, String appointment, String destination, String date,
    		int expectedDuration, double expectedTicketPrice, double expectedDailyHabitation) throws SQLException {
    	statement = connection.createStatement();
    	statement.execute("insert into " + TABLE_NAME +
    			" (name, appointment, destination, date, expectedDuration, expectedTicketPrice, expectedDailyHabitation) values ('"
    			+ name + "', '" + appointment + "', '"  + destination + "', {ts '" + date + " 00:00:00'}, "
    			+ expectedDuration + ", " + expectedTicketPrice + ", " + expectedDailyHabitation + ")");
    	statement.close();
    }
    
    public void insertTrip(String name, String appointment, String destination, String date,
    		int expectedDuration, double expectedTicketPrice, double expectedDailyHabitation,
    		int actualDuration, double actualTicketPrice, double actualDailyHabitation,
    		double balance) throws SQLException {
    	statement = connection.createStatement();
    	statement.execute("insert into " + TABLE_NAME +
    			" (name, appointment, destination, date, expectedDuration, expectedTicketPrice, expectedDailyHabitation, "
    			+ "actualDuration, actualTicketPrice, actualDailyHabitation, balance) values ('"
    			+ name + "', '" + appointment + "', '" + destination + "',  {ts '" + date + " 00:00:00'}, "
    			+ expectedDuration + ", " + expectedTicketPrice + ", " + expectedDailyHabitation + ", "
    			+ actualDuration + ", " + actualTicketPrice + ", " + actualDailyHabitation + ", "
    			+ balance + ")");
    	statement.close();
    }
   
	private void shutdown() throws SQLException {
		try {
			if (statement != null) {
				statement.close();
			}
			if (connection != null) {
				DriverManager.getConnection(URL + ";shutdown=true", USER,
						PASSWORD);
				connection.close();
			}
		} catch (SQLException e) {
			System.err.println("Couldn't shutdown connection");
			throw e;
		}

	}

	public static void main(String[] args) throws Exception {
		DBWorker dbWorker = DBWorker.getInstance();
		
		
//		System.out.println("1");
//		dbWorker.createTable();
		
		
		
		System.out.println("2");
//		dbWorker.insertTrip("Abrams", "Tank", "NY", "1971-02-03");
//		dbWorker.insertTrip("Rommel", "General", "Berlin", "2001-02-03", 1, 2, 3);
//		dbWorker.insertTrip("Mark", "Economist", "Luxemburg", "2014-05-06", 7, 8, 9, 10, 11, 12, 10.32153516321);
		
		System.out.println("3");

		dbWorker.updateTrip("T-4", "doiche tank", "Moscow", "1942-01-06", 1);
		dbWorker.updateTrip("Guderian", "inspector", "Rein", "1944-05-06", 11, 22, 33, 101);
		dbWorker.updateTrip("David", "Manager", "Oslo", "2010-11-12", 60, 61, 62, 63, 64, 64, 201);
		
//		dbWorker.dropTable();
		
		System.out.println("All is ok");
	}
	
}